}
samsize
md <- seq(0.1,5,.1) # mean
nmd <- length(md)
sdd <- seq(0.01,3,0.1) # sd 0.005230679
nsdd <- length(sdd)
# obtain sample sizes
samsize <- array(numeric(nmd*nsdd), dim=c(nmd,nsdd))
for (i in 1:nsdd){
result <- n.ttest(power = 0.8, alpha = 0.05,
for (j in 1:nmd){
mean.diff = md[j], sd1 = sdd[i], sd2 = sdd[i], k = 1,
design = "unpaired", fraction = "balanced", variance = "equal")
samsize[j,i] <- ceiling(as.numeric(result[1]))
md <- seq(0.1,5,.1) # mean
nmd <- length(md)
# power values
sdd <- seq(0.01,3,0.1) # sd 0.005230679
nsdd <- length(sdd)
# obtain sample sizes
samsize <- array(numeric(nmd*nsdd), dim=c(nmd,nsdd))
for (i in 1:nsdd){
for (j in 1:nmd){
result <- n.ttest(power = 0.8, alpha = 0.05,
mean.diff = md[j], sd1 = sdd[i], sd2 = sdd[i], k = 1,
design = "unpaired", fraction = "balanced", variance = "equal")
samsize[j,i] <- ceiling(as.numeric(result[1]))
}
}
# set up graph
xrange <- range(md)
yrange <- round(range(samsize))
colors <- rainbow(length(sdd))
plot(xrange, yrange, type="n",
xlab="Mean difference",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:nsdd){
lines(md, samsize[,i], type="l", lwd=2, col=colors[i])
}
md <- seq(0.1,5,.1) # mean
nmd <- length(md)
# power values
sdd <- seq(0.5,3,0.1) # sd 0.005230679
nsdd <- length(sdd)
# obtain sample sizes
samsize <- array(numeric(nmd*nsdd), dim=c(nmd,nsdd))
for (i in 1:nsdd){
for (j in 1:nmd){
result <- n.ttest(power = 0.8, alpha = 0.05,
mean.diff = md[j], sd1 = sdd[i], sd2 = sdd[i], k = 1,
design = "unpaired", fraction = "balanced", variance = "equal")
samsize[j,i] <- ceiling(as.numeric(result[1]))
}
}
# set up graph
xrange <- range(md)
yrange <- round(range(samsize))
colors <- rainbow(length(sdd))
plot(xrange, yrange, type="n",
xlab="Mean difference",
ylab="Sample Size (n)" )
for (i in 1:nsdd){
lines(md, samsize[,i], type="l", lwd=2, col=colors[i])
}
# add annotation (grid lines, title, legend)
abline(v=0, h=seq(0,yrange[2],50), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1],xrange[2],.02), lty=2,
col="grey89")
title("Sample Size Estimation\n
Sig=0.05 (Two-tailed)")
legend("topright", title="Pop SD", as.character(sdd),
fill=colors)
sdd <- seq(0.5,3,1) # sd 0.005230679
nsdd <- length(sdd)
md <- seq(1,5,.1) # mean
nmd <- length(md)
# power values
sdd <- seq(0.5,3,1) # sd 0.005230679
nsdd <- length(sdd)
# obtain sample sizes
samsize <- array(numeric(nmd*nsdd), dim=c(nmd,nsdd))
for (i in 1:nsdd){
for (j in 1:nmd){
result <- n.ttest(power = 0.8, alpha = 0.05,
mean.diff = md[j], sd1 = sdd[i], sd2 = sdd[i], k = 1,
design = "unpaired", fraction = "balanced", variance = "equal")
samsize[j,i] <- ceiling(as.numeric(result[1]))
}
}
# set up graph
xrange <- range(md)
yrange <- round(range(samsize))
colors <- rainbow(length(sdd))
plot(xrange, yrange, type="n",
xlab="Mean difference",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:nsdd){
lines(md, samsize[,i], type="l", lwd=2, col=colors[i])
}
# add annotation (grid lines, title, legend)
abline(v=0, h=seq(0,yrange[2],50), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1],xrange[2],.02), lty=2,
col="grey89")
title("Sample Size Estimation\n
Sig=0.05 (Two-tailed)")
legend("topright", title="Pop SD", as.character(sdd),
fill=colors)
# power values
sdd <- seq(1,3,1) # sd 0.005230679
nsdd <- length(sdd)
# obtain sample sizes
samsize <- array(numeric(nmd*nsdd), dim=c(nmd,nsdd))
for (i in 1:nsdd){
for (j in 1:nmd){
result <- n.ttest(power = 0.8, alpha = 0.05,
mean.diff = md[j], sd1 = sdd[i], sd2 = sdd[i], k = 1,
design = "unpaired", fraction = "balanced", variance = "equal")
samsize[j,i] <- ceiling(as.numeric(result[1]))
}
}
# set up graph
xrange <- range(md)
yrange <- round(range(samsize))
colors <- rainbow(length(sdd))
plot(xrange, yrange, type="n",
xlab="Mean difference",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:nsdd){
lines(md, samsize[,i], type="l", lwd=2, col=colors[i])
}
# add annotation (grid lines, title, legend)
abline(v=0, h=seq(0,yrange[2],50), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1],xrange[2],.02), lty=2,
col="grey89")
title("Sample Size Estimation\n
Sig=0.05 (Two-tailed)")
legend("topright", title="Pop SD", as.character(sdd),
fill=colors)
abline(v=0, h=seq(0,yrange[2],10), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1],xrange[2],10), lty=2,
col="grey89")
md <- seq(1,5,.1) # mean
nmd <- length(md)
# power values
sdd <- seq(1,3,1) # sd 0.005230679
nsdd <- length(sdd)
# obtain sample sizes
samsize <- array(numeric(nmd*nsdd), dim=c(nmd,nsdd))
for (i in 1:nsdd){
for (j in 1:nmd){
result <- n.ttest(power = 0.8, alpha = 0.05,
mean.diff = md[j], sd1 = sdd[i], sd2 = sdd[i], k = 1,
design = "unpaired", fraction = "balanced", variance = "equal")
samsize[j,i] <- ceiling(as.numeric(result[1]))
}
}
# set up graph
xrange <- range(md)
yrange <- round(range(samsize))
colors <- rainbow(length(sdd))
plot(xrange, yrange, type="n",
xlab="Mean difference",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:nsdd){
lines(md, samsize[,i], type="l", lwd=2, col=colors[i])
}
# add annotation (grid lines, title, legend)
abline(v=0, h=seq(0,yrange[2],10), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1],xrange[2],10), lty=2,
col="grey89")
title("Sample Size Estimation\n
Sig=0.05 (Two-tailed)")
legend("topright", title="Pop SD", as.character(sdd),
fill=colors)
legend("topright", title="SD", as.character(sdd),
fill=colors)
plot(xrange, yrange, type="n",
xlab="Mean difference",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:nsdd){
lines(md, samsize[,i], type="l", lwd=2, col=colors[i])
}
# add annotation (grid lines, title, legend)
abline(v=0, h=seq(0,yrange[2],20), lty=2, col="grey89")
abline(h=0, v=seq(0,xrange[2],20), lty=2,
col="grey89")
title("Sample Size Estimation\n
Sig=0.05 (Two-tailed)")
legend("topright", title="SD", as.character(sdd),
fill=colors)
abline(h=0, v=seq(0,xrange[2],.2), lty=2,
col="grey89")
title("Sample Size Estimation\n
Sig=0.05 (Two-tailed)")
legend("topright", title="SD", as.character(sdd),
fill=colors)
md <- seq(1,5,.1) # mean
nmd <- length(md)
# power values
sdd <- seq(1,3,1) # sd 0.005230679
nsdd <- length(sdd)
# obtain sample sizes
samsize <- array(numeric(nmd*nsdd), dim=c(nmd,nsdd))
for (i in 1:nsdd){
for (j in 1:nmd){
result <- n.ttest(power = 0.8, alpha = 0.05,
mean.diff = md[j], sd1 = sdd[i], sd2 = sdd[i], k = 1,
design = "unpaired", fraction = "balanced", variance = "equal")
samsize[j,i] <- ceiling(as.numeric(result[1]))
}
}
# set up graph
xrange <- range(md)
yrange <- round(range(samsize))
colors <- rainbow(length(sdd))
plot(xrange, yrange, type="n",
xlab="Mean difference",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:nsdd){
lines(md, samsize[,i], type="l", lwd=2, col=colors[i])
}
# add annotation (grid lines, title, legend)
abline(v=0, h=seq(0,yrange[2],20), lty=2, col="grey89")
abline(h=0, v=seq(0,xrange[2],.2), lty=2,
col="grey89")
title("Sample Size Estimation\n
Sig=0.05 (Two-tailed)")
legend("topright", title="SD", as.character(sdd),
fill=colors)
library(pwr)
# range of effect sizes
r <- seq(.1,.5,.01)
nr <- length(r)
# power values
p <- seq(.4,.9,.1)
np <- length(p)
# sample sizes
s <- seq(1,100,1)
ns <- length(s)
# obtain sample sizes
samsize <- array(numeric(ns*np), dim=c(ns,np))
for (i in 1:np){
for (j in 1:ns){
result <- pwr.t.test(n = s[i], d = NULL,
sig.level = .05, power = p[i],
#type="two.sample",
alternative = "two.sided")
samsize[j,i] <- ceiling(result$n)
}
}
# set up graph
xrange <- range(r)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n",
xlab="Effect size (d)",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:np){
lines(r, samsize[,i], type="l", lwd=2, col=colors[i])
}
# add annotation (grid lines, title, legend)
abline(v=0, h=seq(0,yrange[2],50), lty=2, col="grey89")
abline(h=0, v=seq(xrange[1],xrange[2],.02), lty=2,
col="grey89")
title("Sample Size Estimation\n
Sig=0.05 (Two-tailed)")
legend("topright", title="Power", as.character(p),
fill=colors)
library(pwr)
sig<-function(mn,sem,nt)
{
sigma<-sem*sqrt(nt)
expt<-1*sigma
expt
}
delt<-sig(mn=8.8,sem=0.28,nt=23)
delt<-sig(mn=14.6,sem=1.5,nt=4)
delt<-sig(mn=0.03,sem=0.0012,nt=19)
delt<-sig(mn=0.028,sem=0.012,nt=4)
nvals <- seq(2, 100, length.out=200)
powvals <- sapply(nvals, function (x) power.t.test(n=x, delta=delt)$power)
plot(nvals, powvals, xlab="n", ylab="power",
main="Power curve for t-test",
lwd=2, col="red", type="l")
deltas <- c(0.4, 0.6, 0.8, 1)
plot(nvals, seq(0,1, length.out=length(nvals)), xlab="n", ylab="power",
main="Power Curve for\nt-test with varying delta", type="n")
for (i in 1:4) {
powvals <- sapply(nvals, function (x) power.t.test(n=x, delta=deltas[i],type=c("two.sample"))$power)
lines(nvals, powvals, lwd=2, col=i)
}
legend("bottom", lwd=2, col=1:4, legend=c("0.4","0.6", "0.8","1"),bty="n")
##
delt<-sig(mn=0.028,sem=0.012,nt=4)
nvals <- seq(2, 100, length.out=200)
powvals <- sapply(nvals, function (x) power.t.test(n=x, delta=delt)$power)
plot(nvals, powvals, xlab="n", ylab="power",
main="Power curve for t-test",
lwd=2, col="red", type="l")
deltas <- c(0.4, 0.6, 0.8, 1)
plot(nvals, seq(0,1, length.out=length(nvals)), xlab="n", ylab="power",
main="Power Curve for\nt-test with varying delta", type="n")
for (i in 1:4) {
powvals <- sapply(nvals, function (x) power.t.test(n=x, delta=deltas[i],type=c("two.sample"))$power)
lines(nvals, powvals, lwd=2, col=i)
}
legend("bottom", lwd=2, col=1:4, legend=c("0.4","0.6", "0.8","1"),bty="n")
ss<-16/(0.001)^2
ss
ci<-function(mn,sem,nt,n,name)
{
sigma<-sem*sqrt(nt)
cil<-mn-1.96*sigma/sqrt(n)
ciu<-mn+1.96*sigma/sqrt(n)
res<-c(cil,ciu)
res
plot(1:length(n),ciu,type="l",ylim=c(min(cil),max(ciu)),
xlab="sample size",ylab="mean (95% CI)",main=name)
lines(1:length(n),cil)
abline(h=mn, lty=2)
}
res_r<-ci(mn=8.8,sem=0.28,nt=23,n=c(1:30),name="Mass, little brown bat")
res_r<-ci(mn=14.6,sem=1.5,nt=4,n=c(1:30),name="Mass, big brown bat")
res_r<-ci(mn=0.03,sem=0.0012,nt=19,n=c(1:30),name="TMR, little brown bat")
res_r<-ci(mn=0.028,sem=0.012,nt=4,n=c(1:30),name="TMR, big brown bat")
##
ci<-function(mn,sem,nt,n)
{
sigma<-sem*sqrt(nt)
cil<-mn-2*sigma/sqrt(n)
ciu<-mn+2*sigma/sqrt(n)
res<-data.frame(cil=cil,ciu=ciu)
}
res_r<-ci(mn=8.8,sem=0.28,nt=23,n=c(1:30))
res_t<-ci(mn=8.8+0.28*sqrt(23),sem=0.28,nt=23,n=c(1:30))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass")
lines(1:nrow(res_r),res_r[,2])
abline(h=8.8, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=8.8+0.28*sqrt(23), lty=2,col="red")
res_r<-ci(mn=14.6,sem=1.5,nt=4,n=c(1:30))
res_t<-ci(mn=14.6+1.5*sqrt(4),sem=1.5,nt=4,n=c(1:30))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass")
lines(1:nrow(res_r),res_r[,2])
abline(h=14.6, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=14.6+1.5*sqrt(4), lty=2,col="red")
res_r<-ci(mn=0.03,sem=0.0012,nt=19,n=c(1:30))
res_t<-ci(mn=0.03+0.0012*sqrt(19),sem=0.0012,nt=19,n=c(1:30))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass")
lines(1:nrow(res_r),res_r[,2])
abline(h=0.03, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=0.03+0.0012*sqrt(19), lty=2,col="red")
res_r<-ci(mn=0.03,sem=0.0012,nt=19,n=c(1:500))
res_t<-ci(mn=0.028,sem=0.012,nt=4,n=c(1:500))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_t[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="TMR")
lines(1:nrow(res_r),res_r[,2])
abline(h=0.03, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=0.028, lty=2,col="red")
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass, BBB")
lines(1:nrow(res_r),res_r[,2])
abline(h=8.8, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=8.8+0.28*sqrt(23), lty=2,col="red")
ci<-function(mn,sem,nt,n,name)
{
sigma<-sem*sqrt(nt)
cil<-mn-1.96*sigma/sqrt(n)
ciu<-mn+1.96*sigma/sqrt(n)
res<-c(cil,ciu)
res
plot(1:length(n),ciu,type="l",ylim=c(min(cil),max(ciu)),
xlab="sample size",ylab="mean (95% CI)",main=name)
lines(1:length(n),cil)
abline(h=mn, lty=2)
}
res_r<-ci(mn=8.8,sem=0.28,nt=23,n=c(1:30),name="Mass, little brown bat")
res_r<-ci(mn=14.6,sem=1.5,nt=4,n=c(1:30),name="Mass, big brown bat")
res_r<-ci(mn=0.03,sem=0.0012,nt=19,n=c(1:30),name="TMR, little brown bat")
res_r<-ci(mn=0.028,sem=0.012,nt=4,n=c(1:30),name="TMR, big brown bat")
##
ci<-function(mn,sem,nt,n)
{
sigma<-sem*sqrt(nt)
cil<-mn-2*sigma/sqrt(n)
ciu<-mn+2*sigma/sqrt(n)
res<-data.frame(cil=cil,ciu=ciu)
}
res_r<-ci(mn=8.8,sem=0.28,nt=23,n=c(1:30))
res_t<-ci(mn=8.8+0.28*sqrt(23),sem=0.28,nt=23,n=c(1:30))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass, BBB")
lines(1:nrow(res_r),res_r[,2])
abline(h=8.8, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=8.8+0.28*sqrt(23), lty=2,col="red")
res_r<-ci(mn=14.6,sem=1.5,nt=4,n=c(1:30))
res_t<-ci(mn=14.6+1.5*sqrt(4),sem=1.5,nt=4,n=c(1:30))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass")
lines(1:nrow(res_r),res_r[,2])
abline(h=14.6, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=14.6+1.5*sqrt(4), lty=2,col="red")
ci<-function(mn,sem,nt,n)
{
sigma<-sem*sqrt(nt)
cil<-mn-1.96*sigma/sqrt(n)
ciu<-mn+1.96*sigma/sqrt(n)
res<-data.frame(cil=cil,ciu=ciu)
}
res_r<-ci(mn=8.8,sem=0.28,nt=23,n=c(1:30))
res_t<-ci(mn=8.8+0.28*sqrt(23),sem=0.28,nt=23,n=c(1:30))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass, BBB")
lines(1:nrow(res_r),res_r[,2])
abline(h=8.8, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=8.8+0.28*sqrt(23), lty=2,col="red")
ci<-function(mn,sem,nt,n)
{
sigma<-sem*sqrt(nt)
cil<-mn-1*sigma/sqrt(n)
ciu<-mn+1*sigma/sqrt(n)
res<-data.frame(cil=cil,ciu=ciu)
}
res_r<-ci(mn=8.8,sem=0.28,nt=23,n=c(1:30))
res_t<-ci(mn=8.8+0.28*sqrt(23),sem=0.28,nt=23,n=c(1:30))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass, BBB")
lines(1:nrow(res_r),res_r[,2])
abline(h=8.8, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=8.8+0.28*sqrt(23), lty=2,col="red")
ci<-function(mn,sem,nt,n)
{
sigma<-sem*sqrt(nt)
cil<-mn-1.96*sigma/sqrt(n)
ciu<-mn+1.96*sigma/sqrt(n)
res<-data.frame(cil=cil,ciu=ciu)
}
res_r<-ci(mn=8.8,sem=0.28,nt=23,n=c(1:30))
res_t<-ci(mn=8.8+0.28*sqrt(23),sem=0.28,nt=23,n=c(1:30))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass, BBB")
lines(1:nrow(res_r),res_r[,2])
abline(h=8.8, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=8.8+0.28*sqrt(23), lty=2,col="red")
res_r<-ci(mn=14.6,sem=1.5,nt=4,n=c(1:30))
res_t<-ci(mn=14.6+1.5*sqrt(4),sem=1.5,nt=4,n=c(1:30))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass")
lines(1:nrow(res_r),res_r[,2])
abline(h=14.6, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=14.6+1.5*sqrt(4), lty=2,col="red")
res_r<-ci(mn=0.03,sem=0.0012,nt=19,n=c(1:30))
res_t<-ci(mn=0.03+0.0012*sqrt(19),sem=0.0012,nt=19,n=c(1:30))
plot(1:nrow(res_r),res_r[,1],type="l",ylim=c(min(res_r[,1]),max(res_t[,2])),
xlab="sample size",ylab="mean (95% CI)",main="Mass")
lines(1:nrow(res_r),res_r[,2])
abline(h=0.03, lty=2)
lines(1:nrow(res_t),res_t[,1],col="red")
lines(1:nrow(res_t),res_t[,2],col="red")
abline(h=0.03+0.0012*sqrt(19), lty=2,col="red")
res_r
res_t
delt<-sig(mn=0.03,sem=0.0012,nt=19)
delt
library(pomp)
# filovirus - bat model
# Compiling C code and loading the dll
dyn.unload("filov_bat_model.dll")
# compile code
system("R CMD SHLIB filov_bat_model.c")
# load
dyn.load("filov_bat_model.dll")
dyn.unload("filov_bat_model.dll")
# arenavirus - rodent model
# Compiling C code and loading the dll
dyn.unload("arenav_rodent_model.dll")
# compile code
system("R CMD SHLIB arenav_rodent_model.c")
# load
dyn.load("arenav_rodent_model.dll")
dyn.unload("arenav_rodent_model.dll")
